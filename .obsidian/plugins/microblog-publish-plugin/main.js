/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/MicroPlugin.ts
var MicroPlugin_exports = {};
__export(MicroPlugin_exports, {
  default: () => MicroPlugin
});
module.exports = __toCommonJS(MicroPlugin_exports);

// src/networking/NetworkClient.ts
var NetworkClient = class {
  constructor(appToken) {
    this.appToken = appToken;
  }
  async run(request) {
    const url = "https://micro.blog" + request.path + (request.parameters ? "?" + request.parameters : "");
    const response = await fetch(url, {
      method: request.method,
      headers: {
        "Content-Type": "application/json",
        "Accept": "application/json",
        "Authorization": "Bearer " + this.appToken()
      },
      body: request.body
    });
    if (!response.ok) {
      throw new Error("Network error: " + response.status);
    }
    const isSuccess = response.status >= 200 && response.status < 300;
    const isEmptyBody = response.headers.get("content-length") === "0";
    if (isSuccess && isEmptyBody) {
      return {};
    }
    return await response.json();
  }
};

// src/networking/UpdatePostRequest.ts
function makeUpdatePostRequest(url, blogID, title, content) {
  return {
    "action": "update",
    "url": url,
    "mp-destination": blogID,
    "replace": {
      "content": [content],
      "name": [title]
    }
  };
}

// src/networking/NetworkRequestFactory.ts
var NetworkRequestFactory = class {
  makePublishPostRequest(title, content, tags, visibility, blogID, scheduledDate) {
    const parameters = new URLSearchParams([
      ["h", "entry"],
      ["content", content],
      ["post-status", visibility]
    ]);
    if (title.length > 0) {
      parameters.append("name", title);
    }
    if (blogID.length > 0 && blogID != "default") {
      parameters.append("mp-destination", blogID);
    }
    if (scheduledDate.length > 0) {
      parameters.append("published", scheduledDate);
    }
    tags.split(",").forEach((value) => {
      parameters.append("category[]", value.trim());
    });
    return {
      path: "/micropub",
      parameters,
      method: "POST"
    };
  }
  makePublishPageRequest(title, content, blogID, navigation) {
    const parameters = new URLSearchParams([
      ["h", "entry"],
      ["name", title],
      ["content", content],
      ["mp-channel", "pages"],
      ["mp-navigation", navigation.toString()]
    ]);
    if (blogID.length > 0 && blogID != "default") {
      parameters.append("mp-destination", blogID);
    }
    return {
      path: "/micropub",
      parameters,
      method: "POST"
    };
  }
  makeConfigRequest() {
    return {
      path: "/micropub",
      parameters: new URLSearchParams([
        ["q", "config"]
      ]),
      method: "GET"
    };
  }
  makeCategoriesRequest() {
    return {
      path: "/micropub",
      parameters: new URLSearchParams([
        ["q", "category"]
      ]),
      method: "GET"
    };
  }
  makeUpdateRequest(url, blogID, title, content) {
    const body = JSON.stringify(makeUpdatePostRequest(url, blogID, title, content));
    return {
      path: "/micropub",
      method: "POST",
      body
    };
  }
};

// src/MicroPluginContainer.ts
var MicroPluginContainer = class {
  constructor(settings, plugin) {
    this.settings = settings;
    this.plugin = plugin;
    this.networkRequestFactory = new NetworkRequestFactory();
    this.networkClient = new NetworkClient(() => {
      return this.settings.appToken;
    });
  }
};

// src/views/PublishPageViewModel.ts
var PublishPageViewModel = class {
  constructor(title, content, blogs, selectedBlogID, includeInNavigation, networkClient, frontmatterService, networkRequestFactory) {
    this.titleWrappedValue = title;
    this.content = content;
    this.blogs = blogs;
    this.selectedBlogIDWrappedValue = selectedBlogID;
    this.includeInNavigationWrappedValue = includeInNavigation;
    this.isSubmitting = false;
    this.networkClient = networkClient;
    this.frontmatterService = frontmatterService;
    this.networkRequestFactory = networkRequestFactory;
  }
  get title() {
    return this.titleWrappedValue;
  }
  set title(value) {
    this.titleWrappedValue = value;
  }
  get hasMultipleBlogs() {
    return Object.keys(this.blogs).length > 2;
  }
  get selectedBlogID() {
    return this.selectedBlogIDWrappedValue;
  }
  set selectedBlogID(value) {
    this.selectedBlogIDWrappedValue = value;
  }
  get includeInNavigation() {
    return this.includeInNavigationWrappedValue;
  }
  set includeInNavigation(value) {
    this.includeInNavigationWrappedValue = value;
  }
  clearTitle() {
    var _a;
    this.title = "";
    (_a = this.delegate) == null ? void 0 : _a.publishDidClearTitle();
  }
  get showPublishingButton() {
    return this.hasValidTitle && this.isSubmitting;
  }
  get missingTitleText() {
    return this.hasValidTitle ? "" : "Title is mandatory";
  }
  async publishPage() {
    var _a, _b, _c, _d;
    if (!this.hasValidTitle) {
      this.isSubmitting = false;
      (_a = this.delegate) == null ? void 0 : _a.publishDidValidateTitle();
      return;
    }
    this.isSubmitting = true;
    (_b = this.delegate) == null ? void 0 : _b.publishDidValidateTitle();
    try {
      const response = this.networkRequestFactory.makePublishPageRequest(this.title, this.content, this.selectedBlogID, this.includeInNavigation);
      const result = await this.networkClient.run(response);
      this.frontmatterService.save(result.url, "url");
      (_c = this.delegate) == null ? void 0 : _c.publishDidSucceed(result);
    } catch (error) {
      (_d = this.delegate) == null ? void 0 : _d.publishDidFail(error);
    }
  }
  get hasValidTitle() {
    return this.titleWrappedValue.length > 0;
  }
};

// src/views/PublishPostViewModel.ts
var PublishPostViewModel = class {
  constructor(title, content, tags, visibility, blogs, selectedBlogID, networkClient, frontmatterService, networkRequestFactory, viewModelFactory) {
    this.titleWrappedValue = title;
    this.content = content;
    this.tagsWrappedValue = tags;
    this.visibilityWrappedValue = visibility;
    this.blogs = blogs;
    this.selectedBlogIDWrappedValue = selectedBlogID;
    this.scheduledDateWrappedValue = "";
    this.isValidDate = true;
    this.isSubmitting = false;
    this.networkClient = networkClient;
    this.frontmatterService = frontmatterService;
    this.networkRequestFactory = networkRequestFactory;
    this.viewModelFactory = viewModelFactory;
  }
  get title() {
    return this.titleWrappedValue;
  }
  set title(value) {
    this.titleWrappedValue = value;
  }
  get tags() {
    return this.tagsWrappedValue;
  }
  set tags(value) {
    this.tagsWrappedValue = value;
  }
  get visibility() {
    return this.visibilityWrappedValue;
  }
  set visibility(value) {
    this.visibilityWrappedValue = value;
  }
  get hasMultipleBlogs() {
    return Object.keys(this.blogs).length > 2;
  }
  get selectedBlogID() {
    return this.selectedBlogIDWrappedValue;
  }
  set selectedBlogID(value) {
    this.selectedBlogIDWrappedValue = value;
  }
  get scheduledDate() {
    return this.scheduledDateWrappedValue;
  }
  set scheduledDate(value) {
    this.scheduledDateWrappedValue = value;
  }
  get showPublishingButton() {
    return this.isValidDate && this.isSubmitting;
  }
  get invalidDateText() {
    return this.isValidDate ? "" : "Invalid date format";
  }
  async publishNote() {
    var _a, _b, _c, _d;
    if (!this.isValidScheduledDate()) {
      this.isValidDate = false;
      this.isSubmitting = false;
      (_a = this.delegate) == null ? void 0 : _a.publishDidValidateDate();
      return;
    }
    this.isValidDate = true;
    this.isSubmitting = true;
    (_b = this.delegate) == null ? void 0 : _b.publishDidValidateDate();
    try {
      const response = this.networkRequestFactory.makePublishPostRequest(this.title, this.content, this.tags, this.visibility, this.selectedBlogID, this.formattedScheduledDate());
      const result = await this.networkClient.run(response);
      this.frontmatterService.save(result.url, "url");
      (_c = this.delegate) == null ? void 0 : _c.publishDidSucceed(result);
    } catch (error) {
      (_d = this.delegate) == null ? void 0 : _d.publishDidFail(error);
    }
  }
  clearTitle() {
    var _a;
    this.title = "";
    (_a = this.delegate) == null ? void 0 : _a.publishDidClearTitle();
  }
  suggestionsViewModel() {
    const excluding = this.tags.split(",").filter((value) => value.length > 0).map((tag) => tag.trim());
    return this.viewModelFactory.makeTagSuggestionViewModel(excluding, this);
  }
  clearDate() {
    var _a;
    this.scheduledDateWrappedValue = "";
    this.isValidDate = true;
    (_a = this.delegate) == null ? void 0 : _a.publishDidClearDate();
  }
  isValidScheduledDate() {
    const scheduledDate = new Date(this.scheduledDateWrappedValue);
    const isInvalidDate = isNaN(scheduledDate.getTime());
    if (this.scheduledDateWrappedValue.length > 0 && isInvalidDate) {
      return false;
    }
    return true;
  }
  formattedScheduledDate() {
    const scheduledDate = new Date(this.scheduledDateWrappedValue.trim());
    const isInvalidDate = isNaN(scheduledDate.getTime());
    if (isInvalidDate) {
      return "";
    }
    return scheduledDate.toISOString();
  }
  tagSuggestionDidSelectTag(category) {
    var _a;
    const tags = this.tags.split(",").filter((value) => value.length > 0).map((tag) => tag.trim());
    tags.push(category);
    const formattedTags = tags.filter((tag, index) => index === tags.indexOf(tag)).join();
    this.tags = formattedTags;
    (_a = this.delegate) == null ? void 0 : _a.publishDidSelectTag();
  }
};

// src/views/UpdatePageViewModel.ts
var UpdatePageViewModel = class {
  constructor(url, title, content, blogs, selectedBlogID, networkClient, networkRequestFactory) {
    this.url = url;
    this.titleWrappedValue = title;
    this.content = content;
    this.blogs = blogs;
    this.selectedBlogIDWrappedValue = selectedBlogID;
    this.networkClient = networkClient;
    this.networkRequestFactory = networkRequestFactory;
    this.isSubmitting = false;
  }
  async updateNote() {
    var _a, _b, _c, _d;
    if (!this.hasValidTitle) {
      this.isSubmitting = false;
      (_a = this.delegate) == null ? void 0 : _a.updateRequestDidStart();
      return;
    }
    this.isSubmitting = true;
    (_b = this.delegate) == null ? void 0 : _b.updateRequestDidStart();
    try {
      const request = this.networkRequestFactory.makeUpdateRequest(this.url, this.selectedBlogID, this.title, this.content);
      await this.networkClient.run(request);
      (_c = this.delegate) == null ? void 0 : _c.updateDidSucceed();
    } catch (error) {
      (_d = this.delegate) == null ? void 0 : _d.updateDidFail(error);
    }
  }
  get hasMultipleBlogs() {
    return Object.keys(this.blogs).length > 2;
  }
  get selectedBlogID() {
    return this.selectedBlogIDWrappedValue;
  }
  set selectedBlogID(value) {
    this.selectedBlogIDWrappedValue = value;
  }
  get title() {
    return this.titleWrappedValue;
  }
  set title(value) {
    this.titleWrappedValue = value;
  }
  clearTitle() {
    var _a;
    this.title = "";
    (_a = this.delegate) == null ? void 0 : _a.updateDidClearTitle();
  }
  get showUpdatingButton() {
    return this.hasValidTitle && this.isSubmitting;
  }
  get missingTitleText() {
    return this.hasValidTitle ? "" : "Title is mandatory";
  }
  get hasValidTitle() {
    return this.titleWrappedValue.length > 0;
  }
};

// src/views/UpdatePostViewModel.ts
var UpdatePostViewModel = class {
  constructor(url, title, content, blogs, selectedBlogID, networkClient, networkRequestFactory) {
    this.url = url;
    this.titleWrappedValue = title;
    this.content = content;
    this.blogs = blogs;
    this.selectedBlogIDWrappedValue = selectedBlogID;
    this.networkClient = networkClient;
    this.networkRequestFactory = networkRequestFactory;
    this.isSubmitting = false;
  }
  async updateNote() {
    var _a, _b, _c;
    this.isSubmitting = true;
    (_a = this.delegate) == null ? void 0 : _a.updateRequestDidStart();
    try {
      const request = this.networkRequestFactory.makeUpdateRequest(this.url, this.selectedBlogID, this.title, this.content);
      await this.networkClient.run(request);
      (_b = this.delegate) == null ? void 0 : _b.updateDidSucceed();
    } catch (error) {
      (_c = this.delegate) == null ? void 0 : _c.updateDidFail(error);
    }
  }
  get hasMultipleBlogs() {
    return Object.keys(this.blogs).length > 2;
  }
  get selectedBlogID() {
    return this.selectedBlogIDWrappedValue;
  }
  set selectedBlogID(value) {
    this.selectedBlogIDWrappedValue = value;
  }
  get title() {
    return this.titleWrappedValue;
  }
  set title(value) {
    this.titleWrappedValue = value;
  }
  clearTitle() {
    var _a;
    this.title = "";
    (_a = this.delegate) == null ? void 0 : _a.updateDidClearTitle();
  }
  get showUpdatingButton() {
    return this.isSubmitting;
  }
};

// src/extensions/TypeGuards.ts
var import_obsidian = require("obsidian");
function isPublishPostViewModel(value) {
  return typeof value === "object" && value instanceof PublishPostViewModel;
}
function isPublishPageViewModel(value) {
  return typeof value === "object" && value instanceof PublishPageViewModel;
}
function isUpdatePostViewModel(value) {
  return typeof value === "object" && value instanceof UpdatePostViewModel;
}
function isUpdatePageViewModel(value) {
  return typeof value === "object" && value instanceof UpdatePageViewModel;
}
function isMarkdownView(value) {
  return typeof value === "object" && value instanceof import_obsidian.MarkdownView;
}

// src/extensions/String.ts
String.prototype.removeFrontmatter = function() {
  const regex = /---\s*[\s\S]*?\s*---/;
  return this.replace(regex, "");
};

// src/services/FrontmatterService.ts
var import_obsidian2 = require("obsidian");
var FrontmatterService = class {
  constructor(app, file) {
    this.app = app;
    this.file = file;
  }
  save(value, key) {
    if (!this.file)
      return;
    try {
      this.app.fileManager.processFrontMatter(this.file, (frontmatter) => {
        value === null ? delete frontmatter[key] : frontmatter[key] = value;
      });
    } catch (error) {
      console.log("Error saving to YAML frontmatter: " + error);
    }
  }
  retrieveString(key) {
    const frontmatter = this.parseFrontmatterFromFile();
    const entry = (0, import_obsidian2.parseFrontMatterEntry)(frontmatter, key);
    return typeof entry === "string" ? entry : null;
  }
  retrieveStrings(key) {
    const frontmatter = this.parseFrontmatterFromFile();
    return (0, import_obsidian2.parseFrontMatterStringArray)(frontmatter, key);
  }
  parseFrontmatterFromFile() {
    var _a;
    return this.file ? (_a = this.app.metadataCache.getFileCache(this.file)) == null ? void 0 : _a.frontmatter : void 0;
  }
};

// src/services/TagSynchronizationService.ts
var TagSynchronizationService = class {
  constructor(plugin, settings, networkClient, networkRequestFactory, delegate) {
    this.plugin = plugin;
    this.settings = settings;
    this.networkClient = networkClient;
    this.networkRequestFactory = networkRequestFactory;
    this.delegate = delegate;
  }
  async fetchTags() {
    var _a, _b;
    if (this.settings.appToken.length == 0)
      return;
    try {
      const response = await this.networkClient.run(this.networkRequestFactory.makeCategoriesRequest());
      this.settings.tagSuggestions = response.categories;
      this.plugin.saveSettings();
      (_a = this.delegate) == null ? void 0 : _a.tagSynchronizationDidSucceed(response.categories.length);
      console.log("Categories synchronized");
    } catch (error) {
      (_b = this.delegate) == null ? void 0 : _b.tagSynchronizationDidFail(error);
      console.log("Categories synchronization error: " + error);
    }
  }
};

// src/factories/ServiceFactory.ts
var ServiceFactory = class {
  constructor(container) {
    this.container = container;
  }
  makeFrontmatterService(file) {
    return new FrontmatterService(this.container.plugin.app, file);
  }
  makeTagSynchronizationService(delegate) {
    return new TagSynchronizationService(this.container.plugin, this.container.settings, this.container.networkClient, this.container.networkRequestFactory, delegate);
  }
};

// src/models/MarkdownPage.ts
var MarkdownPage = class {
  constructor(frontmatterService, markdownView) {
    this.frontmatterService = frontmatterService;
    this.markdownView = markdownView;
  }
  get title() {
    var _a;
    const filename = (_a = this.markdownView.file) == null ? void 0 : _a.basename;
    const frontmatterTitle = this.frontmatterService.retrieveString("title");
    return frontmatterTitle || filename || "";
  }
  get content() {
    return this.markdownView.editor.getValue().removeFrontmatter();
  }
  get url() {
    const url = this.frontmatterService.retrieveString("url");
    return url;
  }
};

// src/models/MarkdownPost.ts
var MarkdownPost = class {
  constructor(frontmatterService, markdownView) {
    this.frontmatterService = frontmatterService;
    this.markdownView = markdownView;
  }
  get title() {
    var _a;
    const filename = (_a = this.markdownView.file) == null ? void 0 : _a.basename;
    const frontmatterTitle = this.frontmatterService.retrieveString("title");
    return frontmatterTitle || filename || "";
  }
  get content() {
    return this.markdownView.editor.getValue().removeFrontmatter();
  }
  get tags() {
    const frontmatterTags = this.frontmatterService.retrieveStrings("tags");
    return frontmatterTags == null ? void 0 : frontmatterTags.join(",");
  }
  get url() {
    const url = this.frontmatterService.retrieveString("url");
    return url;
  }
};

// src/views/ComposeViewModel.ts
var ComposeViewModel = class {
  constructor(visibility, blogs, selectedBlogID, networkClient, networkRequestFactory) {
    this.visibilityWrappedValue = visibility;
    this.contentWrappedValue = "";
    this.plainTextContent = "";
    this.blogs = blogs;
    this.selectedBlogIDWrappedValue = selectedBlogID;
    this.networkClient = networkClient;
    this.networkRequestFactory = networkRequestFactory;
    this.isSubmitting = false;
  }
  get content() {
    return this.contentWrappedValue;
  }
  set content(value) {
    var _a;
    this.contentWrappedValue = value;
    this.plainTextContent = this.markdownToPlainText(value);
    (_a = this.delegate) == null ? void 0 : _a.publishUpdateCounter(this.characterCounterText);
    this.publishButtonStyle();
  }
  get visibility() {
    return this.visibilityWrappedValue;
  }
  set visibility(value) {
    this.visibilityWrappedValue = value;
  }
  get hasMultipleBlogs() {
    return Object.keys(this.blogs).length > 2;
  }
  get selectedBlogID() {
    return this.selectedBlogIDWrappedValue;
  }
  set selectedBlogID(value) {
    this.selectedBlogIDWrappedValue = value;
  }
  get characterCounterText() {
    return this.plainTextContent.length + "/300";
  }
  async publish() {
    var _a, _b;
    this.isSubmitting = true;
    this.publishButtonStyle();
    try {
      const request = this.networkRequestFactory.makePublishPostRequest("", this.content, "", this.visibility, this.selectedBlogID, "");
      const result = await this.networkClient.run(request);
      (_a = this.delegate) == null ? void 0 : _a.publishDidSucceed(result);
    } catch (error) {
      (_b = this.delegate) == null ? void 0 : _b.publishDidFail(error);
    }
  }
  publishButtonStyle() {
    var _a, _b, _c;
    const isContentInvalid = this.plainTextContent.length <= 0 /* MinLength */ || this.plainTextContent.length > 300 /* MaxLength */;
    if (isContentInvalid) {
      (_a = this.delegate) == null ? void 0 : _a.publicUpdateSubmitButton(0 /* Disabled */);
      return;
    }
    if (this.isSubmitting) {
      (_b = this.delegate) == null ? void 0 : _b.publicUpdateSubmitButton(1 /* Publishing */);
      return;
    }
    (_c = this.delegate) == null ? void 0 : _c.publicUpdateSubmitButton(2 /* Enabled */);
  }
  markdownToPlainText(markdown) {
    return markdown.replace(/^#+\s+/gm, "").replace(/(\*\*|__)(.*?)\1/g, "$2").replace(/(\*|_)(.*?)\1/g, "$2").replace(/\[([^\]]+)\]\([^)]+\)/g, "$1").replace(/!\[([^\]]*)\]\([^)]+\)/g, "$1").replace(/(\n-{3,}|\n>{1,}.+)/g, "").replace(/`{1,3}(.*?)`{1,3}/g, "$1").replace(/^\s*[\d.\-+*]\s+/gm, "").split("\n").map((line) => line.trim()).join(" ").replace(/\s{2,}/g, " ").trim();
  }
};

// src/views/ErrorViewModel.ts
var ErrorViewModel = class {
  constructor(title, message) {
    this.title = title;
    this.message = message;
  }
};

// src/views/MicroPluginSettingsViewModel.ts
var MicroPluginSettingsViewModel = class {
  constructor(plugin, settings, networkClient, networkRequestFactory) {
    this.plugin = plugin;
    this.settings = settings;
    this.networkClient = networkClient;
    this.networkRequestFactory = networkRequestFactory;
  }
  get hasAppToken() {
    return this.settings.appToken.length > 0;
  }
  get appToken() {
    return this.settings.appToken;
  }
  set appToken(value) {
    this.settings.appToken = value;
    this.plugin.saveSettings();
  }
  get tags() {
    return this.settings.defaultTags;
  }
  set tags(value) {
    this.settings.defaultTags = value;
    this.plugin.saveSettings();
  }
  get tagSuggestions() {
    return this.settings.tagSuggestions;
  }
  set tagSuggestions(value) {
    this.settings.tagSuggestions = value;
    this.plugin.saveSettings();
  }
  get visibility() {
    return this.settings.postVisibility;
  }
  set visibility(value) {
    this.settings.postVisibility = value;
    this.plugin.saveSettings();
  }
  get blogs() {
    return this.settings.blogs;
  }
  set blogs(value) {
    this.settings.blogs = value;
    this.plugin.saveSettings();
  }
  get hasMultipleBlogs() {
    return Object.keys(this.blogs).length > 2;
  }
  get selectedBlogID() {
    return this.settings.selectedBlogID;
  }
  set selectedBlogID(value) {
    this.settings.selectedBlogID = value;
    this.plugin.saveSettings();
  }
  get includePagesInNavigation() {
    return this.settings.includePagesInNavigation;
  }
  set includePagesInNavigation(value) {
    this.settings.includePagesInNavigation = value;
    this.plugin.saveSettings();
  }
  async validate() {
    var _a, _b;
    console.log("Logging in");
    try {
      const response = await this.networkClient.run(this.networkRequestFactory.makeConfigRequest());
      this.blogs = MicroPluginSettingsViewModel.makeBlogSettings(response);
      this.selectedBlogID = "default";
      (_a = this.delegate) == null ? void 0 : _a.loginDidSucceed(response);
      console.log("Login successful");
    } catch (error) {
      this.logout();
      (_b = this.delegate) == null ? void 0 : _b.loginDidFail(error);
      console.log("Login error: " + error);
    }
  }
  logout() {
    var _a;
    this.appToken = "";
    this.blogs = {};
    this.tags = "";
    this.selectedBlogID = "default";
    this.visibility = "draft";
    this.tagSuggestions = [];
    (_a = this.delegate) == null ? void 0 : _a.logoutDidSucceed();
    console.log("Logout successful");
  }
  async refreshBlogs() {
    var _a, _b;
    console.log("Refreshing blogs");
    try {
      const response = await this.networkClient.run(this.networkRequestFactory.makeConfigRequest());
      this.blogs = MicroPluginSettingsViewModel.makeBlogSettings(response);
      (_a = this.delegate) == null ? void 0 : _a.refreshDidSucceed(response);
      console.log("Refresh successful");
    } catch (error) {
      (_b = this.delegate) == null ? void 0 : _b.refreshDidFail(error);
      console.log("Refresh failed: " + error);
    }
  }
  static makeBlogSettings(response) {
    var _a;
    const blogs = {};
    blogs["default"] = "Default";
    (_a = response.destination) == null ? void 0 : _a.forEach((blog) => {
      blogs[blog.uid] = blog.name;
    });
    return blogs;
  }
};

// src/views/TagSuggestionViewModel.ts
var TagSuggestionViewModel = class {
  constructor(tags) {
    this.tags = tags;
  }
  get placeholderText() {
    return "Select a category...";
  }
  get instructionsText() {
    const action = this.tags.length == 0 ? "fetch" : "synchronize";
    return "Use command palette to " + action + " categories";
  }
  chooseCategory(tag) {
    var _a;
    (_a = this.delegate) == null ? void 0 : _a.tagSuggestionDidSelectTag(tag);
  }
};

// src/factories/ViewModelFactory.ts
var ViewModelFactory = class {
  constructor(container) {
    this.container = container;
    this.serviceFactory = new ServiceFactory(container);
  }
  makeSubmitPostViewModel(markdownView) {
    const frontmatterService = this.serviceFactory.makeFrontmatterService(markdownView.file);
    const post = new MarkdownPost(frontmatterService, markdownView);
    if (post.url && post.url.length > 0) {
      return this.makeUpdatePostViewModel(post.url, post.title, post.content);
    } else {
      return this.makePublishPostViewModel(post, frontmatterService);
    }
  }
  makeSubmitPageViewModel(markdownView) {
    const frontmatterService = this.serviceFactory.makeFrontmatterService(markdownView.file);
    const page = new MarkdownPage(frontmatterService, markdownView);
    if (page.url && page.url.length > 0) {
      return this.makeUpdatePageViewModel(page.url, page.title, page.content);
    } else {
      return this.makePublishPageViewModel(page, frontmatterService);
    }
  }
  makeMicroPluginSettingsViewModel() {
    return new MicroPluginSettingsViewModel(this.container.plugin, this.container.settings, this.container.networkClient, this.container.networkRequestFactory);
  }
  makeTagSuggestionViewModel(excluding, delegate) {
    const suggestions = this.container.settings.tagSuggestions.filter((element) => !excluding.includes(element));
    const viewModel = new TagSuggestionViewModel(suggestions);
    viewModel.delegate = delegate;
    return viewModel;
  }
  makeComposeViewModel() {
    return new ComposeViewModel(this.container.settings.postVisibility, this.container.settings.blogs, this.container.settings.selectedBlogID, this.container.networkClient, this.container.networkRequestFactory);
  }
  makeEmptyPostErrorViewModel() {
    return new ErrorViewModel("Oops", "Micro.blog does not support blank posts. Please write something before trying again.");
  }
  makeEmptyPageErrorViewModel() {
    return new ErrorViewModel("Oops", "Micro.blog does not support blank page. Please write something before trying again.");
  }
  makePublishPostViewModel(post, frontmatterService) {
    return new PublishPostViewModel(post.title, post.content, post.tags || this.container.settings.defaultTags, this.container.settings.postVisibility, this.container.settings.blogs, this.container.settings.selectedBlogID, this.container.networkClient, frontmatterService, this.container.networkRequestFactory, this);
  }
  makeUpdatePostViewModel(url, title, content) {
    return new UpdatePostViewModel(url, title, content, this.container.settings.blogs, this.container.settings.selectedBlogID, this.container.networkClient, this.container.networkRequestFactory);
  }
  makePublishPageViewModel(page, frontmatterService) {
    return new PublishPageViewModel(page.title, page.content, this.container.settings.blogs, this.container.settings.selectedBlogID, this.container.settings.includePagesInNavigation, this.container.networkClient, frontmatterService, this.container.networkRequestFactory);
  }
  makeUpdatePageViewModel(url, title, content) {
    return new UpdatePageViewModel(url, title, content, this.container.settings.blogs, this.container.settings.selectedBlogID, this.container.networkClient, this.container.networkRequestFactory);
  }
};

// src/stores/StoredSettings.ts
var defaultSettings = {
  appToken: "",
  defaultTags: "",
  postVisibility: "draft",
  blogs: {},
  selectedBlogID: "default",
  tagSuggestions: [],
  includePagesInNavigation: false
};

// src/views/ComposeView.ts
var import_obsidian3 = require("obsidian");
var ComposeView = class extends import_obsidian3.Modal {
  constructor(viewModel, app) {
    super(app);
    this.viewModel = viewModel;
    this.viewModel.delegate = this;
  }
  onOpen() {
    super.onOpen();
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h2", { text: "Micropost" });
    new import_obsidian3.TextAreaComponent(contentEl).setValue(this.viewModel.content).onChange((value) => {
      this.viewModel.content = value;
    }).then((textArea) => {
      textArea.inputEl.style.width = "100%";
      textArea.inputEl.rows = 10;
    });
    this.counterHTMLElement = contentEl.createEl("p", { text: this.viewModel.characterCounterText });
    if (this.viewModel.hasMultipleBlogs) {
      new import_obsidian3.Setting(contentEl).setName("Blog").setDesc("Override the default blog settings for this post.").addDropdown((dropDown) => dropDown.addOptions(this.viewModel.blogs).setValue(this.viewModel.selectedBlogID).onChange((value) => {
        this.viewModel.selectedBlogID = value;
      }));
    }
    new import_obsidian3.Setting(contentEl).setName("Visibility").setDesc("Override the default post visibility setting for this specific post.").addDropdown((dropDown) => dropDown.addOption("draft", "Draft").addOption("published", "Public").setValue(this.viewModel.visibility).onChange((value) => {
      this.viewModel.visibility = value;
    }));
    new import_obsidian3.Setting(contentEl).addButton((button) => button.setButtonText("Post").setDisabled(true).removeCta().onClick(async (_) => {
      await this.viewModel.publish();
    }).then((button2) => {
      this.submitButton = button2;
    }));
  }
  onClose() {
    super.onClose();
    const { contentEl } = this;
    contentEl.empty();
  }
  publishDidSucceed(response) {
    this.makeConfirmationView(response);
  }
  publishDidFail(error) {
    this.makeMessageView("Error", error.message);
  }
  publishUpdateCounter(string) {
    if (!this.counterHTMLElement) {
      return;
    }
    this.counterHTMLElement.innerText = string;
  }
  publicUpdateSubmitButton(style) {
    if (!this.submitButton) {
      return;
    }
    switch (style) {
      case 0 /* Disabled */:
        this.submitButton.setDisabled(true).removeCta();
        break;
      case 1 /* Publishing */:
        this.submitButton.setDisabled(true).removeCta().setButtonText("Publishing...");
        break;
      case 2 /* Enabled */:
        this.submitButton.setDisabled(false).setCta();
        break;
    }
  }
  makeConfirmationView(response) {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h2", { text: "Published" });
    contentEl.createEl("a", { text: "Open post URL", href: response.url });
    contentEl.createEl("br");
    contentEl.createEl("a", { text: "Open post Preview URL", href: response.preview });
  }
  makeMessageView(title, message) {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h2", { text: title });
    contentEl.createEl("p", { text: message });
  }
};

// src/views/ErrorView.ts
var import_obsidian4 = require("obsidian");
var ErrorView = class extends import_obsidian4.Modal {
  constructor(viewModel, app) {
    super(app);
    this.viewModel = viewModel;
  }
  onOpen() {
    super.onOpen();
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h2", { text: this.viewModel.title });
    contentEl.createEl("p", { text: this.viewModel.message });
  }
  onClose() {
    super.onClose();
    const { contentEl } = this;
    contentEl.empty();
  }
};

// src/views/MicroPluginSettingsView.ts
var import_obsidian5 = require("obsidian");
var MicroPluginSettingsView = class extends import_obsidian5.PluginSettingTab {
  constructor(viewModel, app) {
    super(app, viewModel.plugin);
    this.viewModel = viewModel;
  }
  display() {
    this.viewModel.delegate = this;
    if (!this.viewModel.hasAppToken) {
      this.makeLoginView();
    } else {
      this.makeSettingsView();
    }
  }
  hide() {
    super.hide();
    this.viewModel.delegate = void 0;
  }
  loginDidSucceed(_response) {
    this.display();
    new import_obsidian5.Notice("Micro.blog login succeeded");
  }
  loginDidFail(_error) {
    this.display();
    new import_obsidian5.Notice("Micro.blog login failed");
  }
  logoutDidSucceed() {
    this.display();
  }
  refreshDidFail(_error) {
    this.display();
    new import_obsidian5.Notice("Blogs refresh failed");
  }
  refreshDidSucceed(_response) {
    this.display();
    new import_obsidian5.Notice("Blog(s) refreshed");
  }
  makeLoginView() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian5.Setting(containerEl).setName("App Token").setDesc("Visit Micro.blog's Account page to generate one.").addText((text) => text.setPlaceholder("Enter app token").setValue(this.viewModel.appToken).onChange((value) => {
      this.viewModel.appToken = value;
    }));
    new import_obsidian5.Setting(containerEl).addButton((button) => button.setButtonText("Log in").setCta().onClick(async (_) => {
      button.setDisabled(true).removeCta().setButtonText("Logging in...");
      await this.viewModel.validate();
    }));
  }
  makeSettingsView() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Blog" });
    new import_obsidian5.Setting(containerEl).setName("Blog").setDesc("Default blog for new posts and pages.").addDropdown((dropDown) => dropDown.addOptions(this.viewModel.blogs).setValue(this.viewModel.selectedBlogID).onChange((value) => {
      this.viewModel.selectedBlogID = value;
    })).addExtraButton((button) => button.setIcon("sync").setTooltip("Refresh blogs").onClick(async () => {
      button.setDisabled(true);
      await this.viewModel.refreshBlogs();
    }));
    containerEl.createEl("h2", { text: "Posts" });
    new import_obsidian5.Setting(containerEl).setName("Categories").setDesc("Default list of categories for new posts.").addText((text) => text.setPlaceholder("category1, category2, category3").setValue(this.viewModel.tags).onChange((value) => {
      this.viewModel.tags = value;
    }));
    new import_obsidian5.Setting(containerEl).setName("Visibility").setDesc("Default visibility for new posts.").addDropdown((dropDown) => dropDown.addOption("draft", "Draft").addOption("published", "Public").setValue(this.viewModel.visibility).onChange((value) => {
      this.viewModel.visibility = value;
    }));
    containerEl.createEl("h2", { text: "Pages" });
    new import_obsidian5.Setting(containerEl).setName("Navigation").setDesc("Default navigation value. Toggle on to automatically include new pages in the blog's navigation.").addToggle((toggle) => toggle.setValue(this.viewModel.includePagesInNavigation).onChange((value) => {
      this.viewModel.includePagesInNavigation = value;
    }));
    containerEl.createEl("h2", { text: "Misc." });
    new import_obsidian5.Setting(this.containerEl).setName("Sponsor").setDesc("Enjoying this plugin? Show your appreciation with a cup of coffee! \u{1F60A}\u2615").addButton((button) => button.buttonEl.outerHTML = '<a href="https://ko-fi.com/otaviocc" target="_blank"><img height="36" style="border:0px;height:36px;" src="https://storage.ko-fi.com/cdn/kofi3.png?v=3" border="0" alt="Buy Me a Coffee at ko-fi.com" /></a>');
    new import_obsidian5.Setting(containerEl).addButton((button) => button.setButtonText("Log out").setCta().onClick((_) => {
      this.viewModel.logout();
    }));
  }
};

// src/views/PublishPageView.ts
var import_obsidian6 = require("obsidian");
var PublishPageView = class extends import_obsidian6.Modal {
  constructor(viewModel, app) {
    super(app);
    this.viewModel = viewModel;
    this.viewModel.delegate = this;
  }
  onOpen() {
    super.onOpen();
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h2", { text: "Review" });
    new import_obsidian6.Setting(contentEl).setName("Title").setDesc("Title is required for pages.").addText((text) => text.setPlaceholder("Mandatory title").setValue(this.viewModel.title).onChange((value) => {
      this.viewModel.title = value;
    })).addExtraButton((button) => button.setIcon("cross").setTooltip("Clear title").onClick(() => {
      this.viewModel.clearTitle();
    }));
    if (this.viewModel.hasMultipleBlogs) {
      new import_obsidian6.Setting(contentEl).setName("Blog").setDesc("Override the default blog settings for this page.").addDropdown((dropDown) => dropDown.addOptions(this.viewModel.blogs).setValue(this.viewModel.selectedBlogID).onChange((value) => {
        this.viewModel.selectedBlogID = value;
      }));
    }
    new import_obsidian6.Setting(contentEl).setName("Navigation").setDesc("Override the default setting. Toggle on to automatically include this page in the blog's navigation.").addToggle((toggle) => toggle.setValue(this.viewModel.includeInNavigation).onChange((value) => {
      this.viewModel.includeInNavigation = value;
    }));
    new import_obsidian6.Setting(contentEl).addButton((button) => button.setButtonText("Publish").setCta().onClick(async (_) => {
      await this.viewModel.publishPage();
    }).then((button2) => {
      if (this.viewModel.showPublishingButton) {
        button2.setDisabled(true).removeCta().setButtonText("Publishing...");
      }
    })).setDesc(this.viewModel.missingTitleText);
  }
  publishDidClearTitle() {
    this.onOpen();
  }
  publishDidSucceed(response) {
    this.makeConfirmationView(response);
  }
  publishDidFail(error) {
    this.makeMessageView("Error", error.message);
  }
  publishDidValidateTitle() {
    this.onOpen();
  }
  makeConfirmationView(response) {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h2", { text: "Published" });
    contentEl.createEl("a", { text: "Open page URL", href: response.url });
    contentEl.createEl("br");
    contentEl.createEl("a", { text: "Open page Preview URL", href: response.preview });
  }
  makeMessageView(title, message) {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h2", { text: title });
    contentEl.createEl("p", { text: message });
  }
};

// src/views/TagSuggestionView.ts
var import_obsidian7 = require("obsidian");
var TagSuggestionView = class extends import_obsidian7.FuzzySuggestModal {
  constructor(viewModel, app) {
    super(app);
    this.viewModel = viewModel;
  }
  onOpen() {
    super.onOpen();
    this.setPlaceholder(this.viewModel.placeholderText);
    this.setInstructions([
      { command: "", purpose: this.viewModel.instructionsText }
    ]);
  }
  getItems() {
    return this.viewModel.tags;
  }
  getItemText(value) {
    return value;
  }
  onChooseItem(item, _evt) {
    this.viewModel.chooseCategory(item);
  }
};

// src/views/PublishPostView.ts
var import_obsidian8 = require("obsidian");
var PublishPostView = class extends import_obsidian8.Modal {
  constructor(viewModel, app) {
    super(app);
    this.viewModel = viewModel;
    this.viewModel.delegate = this;
  }
  onOpen() {
    super.onOpen();
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h2", { text: "Review" });
    new import_obsidian8.Setting(contentEl).setName("Title").setDesc("While optional, it is encouraged to include a post title for longer posts.").addText((text) => text.setPlaceholder("Optional title").setValue(this.viewModel.title).onChange((value) => {
      this.viewModel.title = value;
    })).addExtraButton((button) => button.setIcon("cross").setTooltip("Clear title").onClick(() => {
      this.viewModel.clearTitle();
    }));
    if (this.viewModel.hasMultipleBlogs) {
      new import_obsidian8.Setting(contentEl).setName("Blog").setDesc("Override the default blog settings for this post.").addDropdown((dropDown) => dropDown.addOptions(this.viewModel.blogs).setValue(this.viewModel.selectedBlogID).onChange((value) => {
        this.viewModel.selectedBlogID = value;
      }));
    }
    new import_obsidian8.Setting(contentEl).setName("Categories").setDesc("Override the default categories assigned to this post.").addText((text) => text.setPlaceholder("category1, category2, category3").setValue(this.viewModel.tags).onChange((value) => {
      this.viewModel.tags = value;
    })).addExtraButton((button) => button.setIcon("plus").setTooltip("Add categories").onClick(() => {
      new TagSuggestionView(this.viewModel.suggestionsViewModel(), this.app).open();
    }));
    new import_obsidian8.Setting(contentEl).setName("Visibility").setDesc("Override the default post visibility setting for this specific post.").addDropdown((dropDown) => dropDown.addOption("draft", "Draft").addOption("published", "Public").setValue(this.viewModel.visibility).onChange((value) => {
      this.viewModel.visibility = value;
    }));
    new import_obsidian8.Setting(contentEl).setName("Scheduled date").setDesc("The inclusion of this date is optional, and it serves the purpose of scheduling posts for future publication. If left blank, the system will default to the current date and time. Please use the following format: YYYY-MM-DD HH:MM.").addText((text) => text.setPlaceholder("YYYY-MM-DD HH:MM").setValue(this.viewModel.scheduledDate).onChange((value) => {
      this.viewModel.scheduledDate = value;
    })).addExtraButton((button) => button.setIcon("cross").setTooltip("Clear date").onClick(() => {
      this.viewModel.clearDate();
    }));
    new import_obsidian8.Setting(contentEl).addButton((button) => button.setButtonText("Publish").setCta().onClick(async (_) => {
      await this.viewModel.publishNote();
    }).then((button2) => {
      if (this.viewModel.showPublishingButton) {
        button2.setDisabled(true).removeCta().setButtonText("Publishing...");
      }
    })).setDesc(this.viewModel.invalidDateText);
  }
  onClose() {
    super.onClose();
    const { contentEl } = this;
    contentEl.empty();
    this.viewModel.delegate = void 0;
  }
  publishDidClearTitle() {
    this.onOpen();
  }
  publishDidClearDate() {
    this.onOpen();
  }
  publishDidSucceed(response) {
    this.makeConfirmationView(response);
  }
  publishDidFail(error) {
    this.makeMessageView("Error", error.message);
  }
  publishDidSelectTag() {
    this.onOpen();
  }
  publishDidValidateDate() {
    this.onOpen();
  }
  makeConfirmationView(response) {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h2", { text: "Published" });
    contentEl.createEl("a", { text: "Open post URL", href: response.url });
    contentEl.createEl("br");
    contentEl.createEl("a", { text: "Open post Preview URL", href: response.preview });
  }
  makeMessageView(title, message) {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h2", { text: title });
    contentEl.createEl("p", { text: message });
  }
};

// src/views/UpdatePageView.ts
var import_obsidian9 = require("obsidian");
var UpdatePageView = class extends import_obsidian9.Modal {
  constructor(viewModel, app) {
    super(app);
    this.viewModel = viewModel;
    this.viewModel.delegate = this;
  }
  onOpen() {
    super.onOpen();
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h2", { text: "Review" });
    contentEl.createEl("p", { text: "This action will replace the current live version of the page with the version from this note." });
    new import_obsidian9.Setting(contentEl).setName("Title").setDesc("Title is required for pages.").addText((text) => text.setPlaceholder("Mandatory title").setValue(this.viewModel.title).onChange((value) => {
      this.viewModel.title = value;
    })).addExtraButton((button) => button.setIcon("cross").setTooltip("Clear title").onClick(() => {
      this.viewModel.clearTitle();
    }));
    if (this.viewModel.hasMultipleBlogs) {
      new import_obsidian9.Setting(contentEl).setName("Blog").setDesc("Please confirm the blog for this page.").addDropdown((dropDown) => dropDown.addOptions(this.viewModel.blogs).setValue(this.viewModel.selectedBlogID).onChange((value) => {
        this.viewModel.selectedBlogID = value;
      }));
    }
    new import_obsidian9.Setting(contentEl).addButton((button) => button.setButtonText("Update").setCta().onClick(async (_) => {
      await this.viewModel.updateNote();
    }).then((button2) => {
      if (this.viewModel.showUpdatingButton) {
        button2.setDisabled(true).removeCta().setButtonText("Updating...");
      }
    })).setDesc(this.viewModel.missingTitleText);
  }
  onClose() {
    super.onClose();
    const { contentEl } = this;
    contentEl.empty();
    this.viewModel.delegate = void 0;
  }
  updateDidClearTitle() {
    this.onOpen();
  }
  updateDidSucceed() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h2", { text: "Updated" });
    contentEl.createEl("a", { text: "Open page URL", href: this.viewModel.url });
  }
  updateDidFail(error) {
    this.makeMessageView("Error", error.message);
  }
  updateRequestDidStart() {
    this.onOpen();
  }
  makeMessageView(title, message) {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h2", { text: title });
    contentEl.createEl("p", { text: message });
  }
};

// src/views/UpdatePostView.ts
var import_obsidian10 = require("obsidian");
var UpdatePostView = class extends import_obsidian10.Modal {
  constructor(viewModel, app) {
    super(app);
    this.viewModel = viewModel;
    this.viewModel.delegate = this;
  }
  onOpen() {
    super.onOpen();
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h2", { text: "Review" });
    contentEl.createEl("p", { text: "This action will replace the current live version of the post with the version from this note." });
    new import_obsidian10.Setting(contentEl).setName("Title").setDesc("While optional, it is encouraged to include a post title for longer posts.").addText((text) => text.setPlaceholder("Optional title").setValue(this.viewModel.title).onChange((value) => {
      this.viewModel.title = value;
    })).addExtraButton((button) => button.setIcon("cross").setTooltip("Clear title").onClick(() => {
      this.viewModel.clearTitle();
    }));
    if (this.viewModel.hasMultipleBlogs) {
      new import_obsidian10.Setting(contentEl).setName("Blog").setDesc("Please confirm the blog for this post.").addDropdown((dropDown) => dropDown.addOptions(this.viewModel.blogs).setValue(this.viewModel.selectedBlogID).onChange((value) => {
        this.viewModel.selectedBlogID = value;
      }));
    }
    new import_obsidian10.Setting(contentEl).addButton((button) => button.setButtonText("Update").setCta().onClick(async (_) => {
      await this.viewModel.updateNote();
    }).then((button2) => {
      if (this.viewModel.showUpdatingButton) {
        button2.setDisabled(true).removeCta().setButtonText("Updating...");
      }
    }));
  }
  onClose() {
    super.onClose();
    const { contentEl } = this;
    contentEl.empty();
    this.viewModel.delegate = void 0;
  }
  updateDidClearTitle() {
    this.onOpen();
  }
  updateDidSucceed() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h2", { text: "Updated" });
    contentEl.createEl("a", { text: "Open post URL", href: this.viewModel.url });
  }
  updateDidFail(error) {
    this.makeMessageView("Error", error.message);
  }
  updateRequestDidStart() {
    this.onOpen();
  }
  makeMessageView(title, message) {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h2", { text: title });
    contentEl.createEl("p", { text: message });
  }
};

// src/MicroPlugin.ts
var import_obsidian11 = require("obsidian");
var MicroPlugin = class extends import_obsidian11.Plugin {
  async onload() {
    await this.loadSettings();
    await this.loadDependencies();
    await this.loadViewModelFactory();
    await this.loadServiceFactory();
    await this.registerSynchronizationService();
    this.synchronizationService.fetchTags();
    this.addCommand({
      id: "microblog-publish-post-command",
      name: "Publish Post to Micro.blog",
      editorCallback: (editor, markdownView) => {
        if (editor.getValue().trim().length == 0) {
          new ErrorView(this.viewModelFactory.makeEmptyPostErrorViewModel(), this.app).open();
        } else if (isMarkdownView(markdownView)) {
          const viewModel = this.viewModelFactory.makeSubmitPostViewModel(markdownView);
          if (isPublishPostViewModel(viewModel)) {
            new PublishPostView(viewModel, this.app).open();
          }
          if (isUpdatePostViewModel(viewModel)) {
            new UpdatePostView(viewModel, this.app).open();
          }
        }
      }
    });
    this.addCommand({
      id: "microblog-publish-page-command",
      name: "Publish Page to Micro.blog",
      editorCallback: (editor, markdownView) => {
        if (editor.getValue().trim().length == 0) {
          new ErrorView(this.viewModelFactory.makeEmptyPageErrorViewModel(), this.app).open();
        } else if (isMarkdownView(markdownView)) {
          const viewModel = this.viewModelFactory.makeSubmitPageViewModel(markdownView);
          if (isPublishPageViewModel(viewModel)) {
            new PublishPageView(viewModel, this.app).open();
          }
          if (isUpdatePageViewModel(viewModel)) {
            new UpdatePageView(viewModel, this.app).open();
          }
        }
      }
    });
    this.addCommand({
      id: "microblog-categories-sync-command",
      name: "Synchronize Categories",
      callback: () => {
        this.synchronizationService.fetchTags();
      }
    });
    if (import_obsidian11.Platform.isDesktopApp) {
      this.addCommand({
        id: "microblog-publish-compose-micropost",
        name: "Compose Micropost",
        callback: () => {
          this.openComposeMicropostView();
        }
      });
      this.addRibbonIcon("message-circle", "Compose Micropost", () => {
        this.openComposeMicropostView();
      });
    }
    this.addSettingTab(new MicroPluginSettingsView(this.viewModelFactory.makeMicroPluginSettingsViewModel(), this.app));
  }
  onunload() {
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  tagSynchronizationDidSucceed(count) {
    new import_obsidian11.Notice("Categories synchronized. Found " + count + " categories");
  }
  tagSynchronizationDidFail(_error) {
    new import_obsidian11.Notice("Error synchronizing categories");
  }
  async loadSettings() {
    this.settings = Object.assign({}, defaultSettings, await this.loadData());
  }
  async loadDependencies() {
    this.container = new MicroPluginContainer(this.settings, this);
  }
  async loadViewModelFactory() {
    this.viewModelFactory = new ViewModelFactory(this.container);
  }
  async loadServiceFactory() {
    this.serviceFactory = new ServiceFactory(this.container);
  }
  async registerSynchronizationService() {
    this.synchronizationService = this.serviceFactory.makeTagSynchronizationService(this);
  }
  openComposeMicropostView() {
    const viewModel = this.viewModelFactory.makeComposeViewModel();
    new ComposeView(viewModel, this.app).open();
  }
};
